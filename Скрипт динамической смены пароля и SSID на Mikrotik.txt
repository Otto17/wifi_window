# ====================================================================
# Скрипт смены ПАРОЛЯ (динамическая длина) и SSID с авто-определением
# Тестировал на роутерах: RB951Ui-2nD (RouterOS 6.48); RB951Ui-2HnD (RouterOS 6.49); RBD52G-5HacD2HnD (RouterOS 7.19).
# ====================================================================

# --- НАСТРОЙКИ ---

# --- Настройки пароля ---
# Задайте диапазон длины пароля (от 8 до 63 символов)
:local minPasswordLength 8
:local maxPasswordLength 10

# --- Настройки SSID ---
# true - менять SSID, false - менять только пароль
:local changeSsid false
# Длина генерируемого SSID (если смена включена)
:local ssidLength 6


# --- Переменные для авто-определения ---
:local securityProfile ""
:local wlan24Interface ""

# --- ПОИСК АКТИВНОГО ИНТЕРФЕЙСА 2.4ГГц И ЕГО ПРОФИЛЯ ---
:foreach i in=[/interface wireless find where disabled=no] do={
    :if ([:len $wlan24Interface] = 0) do={
        :local currentBand [/interface wireless get $i band]
        :if ([:find $currentBand "2ghz"] >= 0) do={
            :set wlan24Interface [/interface wireless get $i name]
            :set securityProfile [/interface wireless get $i security-profile]
        }
    }
}

# --- ПРОВЕРКА: НАЙДЕН ЛИ ИНТЕРФЕЙС И ПРОФИЛЬ ---
:if ([:len $wlan24Interface] = 0) do={
    :log error "Не удалось найти активный 2.4ГГц интерфейс. Смена отменена."
    :put "ОШИБКА: Активный 2.4ГГц интерфейс не найден!"
} else={
    :log info "Автоматически определен интерфейс '$wlan24Interface' и его профиль '$securityProfile'."

    # --- ПОДГОТОВКА К ГЕНЕРАЦИИ ---
    :local timeStr [/system clock get time]
    :local uptimeStr [:tostr [/system resource get uptime]]
    :local cpuLoad [/system resource get cpu-load]
    :local timeHours [:tonum [:pick $timeStr 0 2]]
    :local timeMinutes [:tonum [:pick $timeStr 3 5]]
    :local timeSeconds [:tonum [:pick $timeStr 6 8]]
    :local baseSeed (($timeHours * 3600) + ($timeMinutes * 60) + $timeSeconds + ($cpuLoad * 1000))
    :local uptimeNum 0
    :for j from=0 to=([:len $uptimeStr] - 1) do={
        :local char [:pick $uptimeStr $j]
        :local asciiCode [:tonum $char]
        :if ([:typeof $asciiCode] = "num") do={ :set uptimeNum ($uptimeNum + $asciiCode) }
    }
    :set baseSeed ($baseSeed + $uptimeNum)

    # --- ВАЛИДАЦИЯ И ОПРЕДЕЛЕНИЕ ДЛИНЫ ПАРОЛЯ ---
    # Защита от некорректных значений
    :if ($minPasswordLength < 8) do={ :set minPasswordLength 8 }
    :if ($maxPasswordLength > 63) do={ :set maxPasswordLength 63 }
    :if ($minPasswordLength > $maxPasswordLength) do={ :set minPasswordLength $maxPasswordLength }
    
    # Расчет случайной длины в заданном диапазоне
    :local lengthRange ($maxPasswordLength - $minPasswordLength + 1)
    :local randomLengthOffset (($baseSeed) % $lengthRange)
    :local actualPasswordLength ($minPasswordLength + $randomLengthOffset)

    # --- ГЕНЕРАЦИЯ СЛУЧАЙНОГО ПАРОЛЯ ---
    :local newPassword ""
    # Добавлены символы тире и нижнего подчеркивания
    :local passChars "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789-_"
    :local passCharsLen [:len $passChars]
    :local currentSeed $baseSeed
    # Используем динамически сгенерированную длину
    :for i from=1 to=$actualPasswordLength do={
        :set currentSeed ((($currentSeed * 1103515245) + 12345) % 2147483648)
        :local mixedSeed ($currentSeed + ($i * 104729))
        :local charIndex ($mixedSeed % $passCharsLen)
        :if ($charIndex < 0) do={ :set charIndex ($charIndex * -1) }
        :set newPassword ($newPassword . [:pick $passChars $charIndex ($charIndex + 1)])
    }
    :log info ("Сгенерирован новый пароль (длина: $actualPasswordLength): " . $newPassword)

    # --- ГЕНЕРАЦИЯ НОВОГО SSID (ЕСЛИ ВКЛЮЧЕНО) ---
    :local newSsid ""
    :if ($changeSsid) do={
        :local ssidChars "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        :local ssidCharsLen [:len $ssidChars]
        :set currentSeed ($baseSeed + 1)
        :for i from=1 to=$ssidLength do={
            :set currentSeed ((($currentSeed * 1664525) + 1013904223) % 2147483648)
            :local charIndex ($currentSeed % $ssidCharsLen)
            :if ($charIndex < 0) do={ :set charIndex ($charIndex * -1) }
            :set newSsid ($newSsid . [:pick $ssidChars $charIndex ($charIndex + 1)])
        }
        :log info ("Сгенерирован новый SSID: " . $newSsid)
    }

    # --- ПРИМЕНЕНИЕ ИЗМЕНЕНИЙ ---
    :do {
        :local oldPassword [/interface wireless security-profiles get [find name=$securityProfile] wpa2-pre-shared-key]
        :local oldSsid [/interface wireless get [find name=$wlan24Interface] ssid]
        
        /interface wireless security-profiles set [find name=$securityProfile] authentication-types=wpa2-psk wpa2-pre-shared-key=$newPassword
        :log info ("Пароль для профиля '$securityProfile' изменён.")

        :if ($changeSsid) do={
            /interface wireless set [find name=$wlan24Interface] ssid=$newSsid
            :log info ("SSID для интерфейса '$wlan24Interface' изменён.")
        }
        
        # --- ВЫВОД РЕЗУЛЬТАТОВ В КОНСОЛЬ ---
        :put "================================"
        :put ("Интерфейс: " . $wlan24Interface)
        :put ("Профиль безопасности: " . $securityProfile)
        
        :if ($changeSsid) do={
             :put ("СТАРЫЙ SSID: " . $oldSsid)
             :put ("НОВЫЙ SSID: " . $newSsid)
        } else={
             :put ("SSID не менялся: " . $oldSsid)
        }

        :put ("СТАРЫЙ ПАРОЛЬ: " . $oldPassword)
        # Добавляем вывод фактической длины пароля
        :put ("НОВЫЙ ПАРОЛЬ: " . $newPassword . " (длина: " . $actualPasswordLength . ")")
        :put "================================"

    } on-error={
        :log error "Ошибка при применении изменений!"
        :put "ОШИБКА: Не удалось изменить параметры WiFi!"
    }
}